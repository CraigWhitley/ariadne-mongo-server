type User {
  id: ID!
  email: String!
  accessToken: String
  whitelist: [Permission]
  blacklist: [Permission]
  roles: [Role!]!
}

type UsersPermissions {
    whitelist: [Permission]
    blacklist: [Permission]
    permissions: [Permission]
}

input UserRoleInput {
    userId: String!
    roleId: String!
}

input UpdateEmailInput {
    currentEmail: String!
    newEmail: String!
    password: String!
}

extend type Query {
    getAllUsers(skip: Int!, take: Int!): [User!]!
    findUserByEmail(email: String!):User
    me: User
    getUsersPermissions(email: String):UsersPermissions
}

extend type Mutation {
    addRoleToUser(data: UserRoleInput!): User
    updateEmail(data: UpdateEmailInput!): User!
}
